# Generated from Szprajch/Szprajch.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,49,365,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,
        1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        1,20,1,20,1,20,1,20,1,20,1,20,3,20,156,8,20,1,21,1,21,1,21,1,21,
        1,21,1,21,3,21,164,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,3,22,176,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,3,23,188,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,3,24,202,8,24,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,
        1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,
        1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,3,35,281,8,35,1,36,1,36,1,36,1,37,
        1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,297,8,38,
        1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,42,1,42,5,42,316,8,42,10,42,12,42,319,9,42,1,42,1,42,
        1,43,1,43,5,43,325,8,43,10,43,12,43,328,9,43,1,44,4,44,331,8,44,
        11,44,12,44,332,1,44,1,44,4,44,337,8,44,11,44,12,44,338,3,44,341,
        8,44,1,45,1,45,5,45,345,8,45,10,45,12,45,348,9,45,1,45,1,45,1,46,
        1,46,1,47,3,47,355,8,47,1,47,1,47,1,48,4,48,360,8,48,11,48,12,48,
        361,1,48,1,48,0,0,49,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,97,49,1,0,6,2,0,10,10,13,13,3,0,
        65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,10,
        10,13,13,34,34,2,0,9,9,32,32,379,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
        0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
        0,0,97,1,0,0,0,1,99,1,0,0,0,3,101,1,0,0,0,5,103,1,0,0,0,7,105,1,
        0,0,0,9,107,1,0,0,0,11,109,1,0,0,0,13,113,1,0,0,0,15,116,1,0,0,0,
        17,119,1,0,0,0,19,122,1,0,0,0,21,124,1,0,0,0,23,126,1,0,0,0,25,128,
        1,0,0,0,27,130,1,0,0,0,29,135,1,0,0,0,31,139,1,0,0,0,33,141,1,0,
        0,0,35,143,1,0,0,0,37,145,1,0,0,0,39,147,1,0,0,0,41,155,1,0,0,0,
        43,163,1,0,0,0,45,175,1,0,0,0,47,187,1,0,0,0,49,201,1,0,0,0,51,203,
        1,0,0,0,53,211,1,0,0,0,55,217,1,0,0,0,57,221,1,0,0,0,59,227,1,0,
        0,0,61,234,1,0,0,0,63,241,1,0,0,0,65,250,1,0,0,0,67,256,1,0,0,0,
        69,260,1,0,0,0,71,280,1,0,0,0,73,282,1,0,0,0,75,285,1,0,0,0,77,296,
        1,0,0,0,79,298,1,0,0,0,81,301,1,0,0,0,83,305,1,0,0,0,85,313,1,0,
        0,0,87,322,1,0,0,0,89,330,1,0,0,0,91,342,1,0,0,0,93,351,1,0,0,0,
        95,354,1,0,0,0,97,359,1,0,0,0,99,100,5,42,0,0,100,2,1,0,0,0,101,
        102,5,47,0,0,102,4,1,0,0,0,103,104,5,43,0,0,104,6,1,0,0,0,105,106,
        5,45,0,0,106,8,1,0,0,0,107,108,5,94,0,0,108,10,1,0,0,0,109,110,5,
        77,0,0,110,111,5,79,0,0,111,112,5,68,0,0,112,12,1,0,0,0,113,114,
        5,60,0,0,114,115,5,62,0,0,115,14,1,0,0,0,116,117,5,62,0,0,117,118,
        5,61,0,0,118,16,1,0,0,0,119,120,5,60,0,0,120,121,5,61,0,0,121,18,
        1,0,0,0,122,123,5,62,0,0,123,20,1,0,0,0,124,125,5,60,0,0,125,22,
        1,0,0,0,126,127,5,61,0,0,127,24,1,0,0,0,128,129,5,73,0,0,129,26,
        1,0,0,0,130,131,5,65,0,0,131,132,5,76,0,0,132,133,5,66,0,0,133,134,
        5,79,0,0,134,28,1,0,0,0,135,136,5,78,0,0,136,137,5,73,0,0,137,138,
        5,89,0,0,138,30,1,0,0,0,139,140,5,44,0,0,140,32,1,0,0,0,141,142,
        5,40,0,0,142,34,1,0,0,0,143,144,5,41,0,0,144,36,1,0,0,0,145,146,
        5,91,0,0,146,38,1,0,0,0,147,148,5,93,0,0,148,40,1,0,0,0,149,150,
        5,76,0,0,150,151,5,69,0,0,151,156,5,78,0,0,152,153,5,108,0,0,153,
        154,5,101,0,0,154,156,5,110,0,0,155,149,1,0,0,0,155,152,1,0,0,0,
        156,42,1,0,0,0,157,158,5,86,0,0,158,159,5,65,0,0,159,164,5,76,0,
        0,160,161,5,118,0,0,161,162,5,97,0,0,162,164,5,108,0,0,163,157,1,
        0,0,0,163,160,1,0,0,0,164,44,1,0,0,0,165,166,5,73,0,0,166,167,5,
        83,0,0,167,168,5,78,0,0,168,169,5,65,0,0,169,176,5,78,0,0,170,171,
        5,105,0,0,171,172,5,115,0,0,172,173,5,110,0,0,173,174,5,97,0,0,174,
        176,5,110,0,0,175,165,1,0,0,0,175,170,1,0,0,0,176,46,1,0,0,0,177,
        178,5,71,0,0,178,179,5,79,0,0,179,180,5,68,0,0,180,181,5,69,0,0,
        181,188,5,74,0,0,182,183,5,103,0,0,183,184,5,111,0,0,184,185,5,100,
        0,0,185,186,5,101,0,0,186,188,5,106,0,0,187,177,1,0,0,0,187,182,
        1,0,0,0,188,48,1,0,0,0,189,190,5,87,0,0,190,191,5,75,0,0,191,192,
        5,76,0,0,192,193,5,85,0,0,193,194,5,68,0,0,194,202,5,90,0,0,195,
        196,5,119,0,0,196,197,5,107,0,0,197,198,5,108,0,0,198,199,5,117,
        0,0,199,200,5,100,0,0,200,202,5,122,0,0,201,189,1,0,0,0,201,195,
        1,0,0,0,202,50,1,0,0,0,203,204,5,90,0,0,204,205,5,77,0,0,205,206,
        5,73,0,0,206,207,5,89,0,0,207,208,5,78,0,0,208,209,5,78,0,0,209,
        210,5,79,0,0,210,52,1,0,0,0,211,212,5,71,0,0,212,213,5,79,0,0,213,
        214,5,68,0,0,214,215,5,75,0,0,215,216,5,65,0,0,216,54,1,0,0,0,217,
        218,5,74,0,0,218,219,5,65,0,0,219,220,5,75,0,0,220,56,1,0,0,0,221,
        222,5,80,0,0,222,223,5,79,0,0,223,224,5,84,0,0,224,225,5,89,0,0,
        225,226,5,77,0,0,226,58,1,0,0,0,227,228,5,73,0,0,228,229,5,78,0,
        0,229,230,5,75,0,0,230,231,5,83,0,0,231,232,5,90,0,0,232,233,5,89,
        0,0,233,60,1,0,0,0,234,235,5,75,0,0,235,236,5,79,0,0,236,237,5,78,
        0,0,237,238,5,73,0,0,238,239,5,69,0,0,239,240,5,67,0,0,240,62,1,
        0,0,0,241,242,5,70,0,0,242,243,5,85,0,0,243,244,5,78,0,0,244,245,
        5,75,0,0,245,246,5,67,0,0,246,247,5,89,0,0,247,248,5,74,0,0,248,
        249,5,79,0,0,249,64,1,0,0,0,250,251,5,78,0,0,251,252,5,65,0,0,252,
        253,5,90,0,0,253,254,5,79,0,0,254,255,5,84,0,0,255,66,1,0,0,0,256,
        257,5,68,0,0,257,258,5,76,0,0,258,259,5,65,0,0,259,68,1,0,0,0,260,
        261,5,80,0,0,261,262,5,211,0,0,262,263,5,75,0,0,263,264,5,73,0,0,
        264,70,1,0,0,0,265,266,5,67,0,0,266,267,5,73,0,0,267,268,5,79,0,
        0,268,269,5,77,0,0,269,270,5,80,0,0,270,271,5,76,0,0,271,272,5,79,
        0,0,272,281,5,74,0,0,273,274,5,99,0,0,274,275,5,105,0,0,275,276,
        5,109,0,0,276,277,5,112,0,0,277,278,5,108,0,0,278,279,5,111,0,0,
        279,281,5,106,0,0,280,265,1,0,0,0,280,273,1,0,0,0,281,72,1,0,0,0,
        282,283,5,65,0,0,283,284,5,379,0,0,284,74,1,0,0,0,285,286,5,67,0,
        0,286,287,5,79,0,0,287,76,1,0,0,0,288,289,5,78,0,0,289,290,5,69,
        0,0,290,291,5,88,0,0,291,297,5,84,0,0,292,293,5,110,0,0,293,294,
        5,101,0,0,294,295,5,120,0,0,295,297,5,116,0,0,296,288,1,0,0,0,296,
        292,1,0,0,0,297,78,1,0,0,0,298,299,5,68,0,0,299,300,5,79,0,0,300,
        80,1,0,0,0,301,302,5,67,0,0,302,303,5,73,0,0,303,304,5,346,0,0,304,
        82,1,0,0,0,305,306,5,83,0,0,306,307,5,84,0,0,307,308,5,79,0,0,308,
        309,5,80,0,0,309,310,5,78,0,0,310,311,5,73,0,0,311,312,5,74,0,0,
        312,84,1,0,0,0,313,317,3,53,26,0,314,316,8,0,0,0,315,314,1,0,0,0,
        316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,0,
        319,317,1,0,0,0,320,321,6,42,0,0,321,86,1,0,0,0,322,326,7,1,0,0,
        323,325,7,2,0,0,324,323,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,
        326,327,1,0,0,0,327,88,1,0,0,0,328,326,1,0,0,0,329,331,7,3,0,0,330,
        329,1,0,0,0,331,332,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,
        340,1,0,0,0,334,336,5,46,0,0,335,337,7,3,0,0,336,335,1,0,0,0,337,
        338,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,
        334,1,0,0,0,340,341,1,0,0,0,341,90,1,0,0,0,342,346,5,34,0,0,343,
        345,8,4,0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,346,
        347,1,0,0,0,347,349,1,0,0,0,348,346,1,0,0,0,349,350,5,34,0,0,350,
        92,1,0,0,0,351,352,5,36,0,0,352,94,1,0,0,0,353,355,5,13,0,0,354,
        353,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,357,5,10,0,0,357,
        96,1,0,0,0,358,360,7,5,0,0,359,358,1,0,0,0,360,361,1,0,0,0,361,359,
        1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,364,6,48,0,0,364,98,
        1,0,0,0,16,0,155,163,175,187,201,280,296,317,326,332,338,340,346,
        354,361,1,6,0,0
    ]

class SzprajchLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MUL = 1
    DIV = 2
    ADD = 3
    SUB = 4
    EXP = 5
    MOD = 6
    NEQ = 7
    GTE = 8
    LTE = 9
    GT = 10
    LT = 11
    EQ = 12
    AND = 13
    OR = 14
    NOT = 15
    COMMA = 16
    LPAREN = 17
    RPAREN = 18
    LBRACKET = 19
    RBRACKET = 20
    LEN = 21
    VAL = 22
    ISNAN = 23
    PRINT = 24
    INPUT = 25
    LET = 26
    REM = 27
    IF = 28
    THEN = 29
    ELSE = 30
    END = 31
    FUNCTION = 32
    RETURN = 33
    FOR = 34
    WHILE = 35
    REPEAT = 36
    UNTIL = 37
    STEP = 38
    NEXT = 39
    TO = 40
    CONTINUE = 41
    BREAK = 42
    COMMENT = 43
    ID = 44
    NUMBER = 45
    STRINGLITERAL = 46
    DOLLAR = 47
    NEWLINE = 48
    WS = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'*'", "'/'", "'+'", "'-'", "'^'", "'MOD'", "'<>'", "'>='", 
            "'<='", "'>'", "'<'", "'='", "'I'", "'ALBO'", "'NIY'", "','", 
            "'('", "')'", "'['", "']'", "'ZMIYNNO'", "'GODKA'", "'JAK'", 
            "'POTYM'", "'INKSZY'", "'KONIEC'", "'FUNKCYJO'", "'NAZOT'", 
            "'DLA'", "'P\\u00D3KI'", "'A\\u017B'", "'CO'", "'DO'", "'CI\\u015A'", 
            "'STOPNIJ'", "'$'" ]

    symbolicNames = [ "<INVALID>",
            "MUL", "DIV", "ADD", "SUB", "EXP", "MOD", "NEQ", "GTE", "LTE", 
            "GT", "LT", "EQ", "AND", "OR", "NOT", "COMMA", "LPAREN", "RPAREN", 
            "LBRACKET", "RBRACKET", "LEN", "VAL", "ISNAN", "PRINT", "INPUT", 
            "LET", "REM", "IF", "THEN", "ELSE", "END", "FUNCTION", "RETURN", 
            "FOR", "WHILE", "REPEAT", "UNTIL", "STEP", "NEXT", "TO", "CONTINUE", 
            "BREAK", "COMMENT", "ID", "NUMBER", "STRINGLITERAL", "DOLLAR", 
            "NEWLINE", "WS" ]

    ruleNames = [ "MUL", "DIV", "ADD", "SUB", "EXP", "MOD", "NEQ", "GTE", 
                  "LTE", "GT", "LT", "EQ", "AND", "OR", "NOT", "COMMA", 
                  "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "LEN", "VAL", 
                  "ISNAN", "PRINT", "INPUT", "LET", "REM", "IF", "THEN", 
                  "ELSE", "END", "FUNCTION", "RETURN", "FOR", "WHILE", "REPEAT", 
                  "UNTIL", "STEP", "NEXT", "TO", "CONTINUE", "BREAK", "COMMENT", 
                  "ID", "NUMBER", "STRINGLITERAL", "DOLLAR", "NEWLINE", 
                  "WS" ]

    grammarFileName = "Szprajch.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


